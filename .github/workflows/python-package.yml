name: Release Workflow

on:
  push:
    branches:
      - setup-release-workflow  # Change to your main branch name

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11  # Replace with your desired Python version

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Install dependencies
      run: pip install -r requirements.txt  # Replace with your dependencies file

    - name: Check if a release exists
      id: check_release
      run: |
        latest_release=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name // "none"')
        if [ "$latest_release" == "none" ]; then
          echo "No existing release found."
          export NO_RELEASE=true
        else
          echo "Latest release is $latest_release"
          export LATEST_RELEASE=$latest_release
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

    - name: Parse and bump version
      if: steps.check_release.NO_RELEASE != 'true'
      id: bump_version
      run: |
        latest_release=$LATEST_RELEASE  # Pass the latest release as an argument
        echo "Bumping up from $latest_release"
        # Parse the latest version
        major_version=$(echo $latest_release | cut -d'.' -f1)
        minor_version=$(echo $latest_release | cut -d'.' -f2)
        patch_version=$(echo $latest_release | cut -d'.' -f3)
        # Increment the patch version
        new_version="$major_version.$minor_version.$((patch_version + 1))"
        echo "Bumped release to version $new_version"
        export NEW_VERSION=$new_version
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        # LATEST_RELEASE: ${{ steps.check_release.LATEST_RELEASE }}

    
    - name: Create a new release
      run: |
        new_version=$NEW_VERSION  # Pass the new version as an argument
    
        if [ -n "$new_version" ]; then
          echo "Creating release for version $new_version"
        else
          new_version="1.0.0"  # Use the initial version if no release exists
          echo "Creating release for initial version $new_version"
        fi

        echo "Creating release for version $new_version"
    
        curl -X POST "https://api.github.com/repos/${{ github.repository }}/releases" \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "tag_name": "'"$new_version"'",
            "name": "Release '"$new_version"'",
            "body": "Release '"$new_version"'",
            "draft": false,
            "prerelease": false
          }'
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        # NEW_VERSION: ${{ steps.bump_version.NEW_VERSION }}      
    

  
      
